{"version":3,"file":"contentScript.js","mappings":";;;;;;;AAAa;AACb;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D;AACA;AACA;AACA,sBAAsB,YAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,cAAc,IAAI;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;UE1KA;UACA;UACA;UACA;UACA","sources":["webpack://crypto-wallet-extension/./src/content/contentScript.ts","webpack://crypto-wallet-extension/webpack/before-startup","webpack://crypto-wallet-extension/webpack/startup","webpack://crypto-wallet-extension/webpack/after-startup"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Tạo một ID duy nhất cho mỗi request\nlet requestId = 0;\nfunction getNextRequestId() {\n    return `request_${++requestId}`;\n}\n// Hàm gửi message đến background script với retry\nfunction sendMessageToBackground(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const id = getNextRequestId();\n        return new Promise((resolve, reject) => {\n            const listener = (response) => {\n                if (response.id === id) {\n                    chrome.runtime.onMessage.removeListener(listener);\n                    if (response.error) {\n                        reject(new Error(response.error));\n                    }\n                    else {\n                        resolve(response.data);\n                    }\n                }\n            };\n            chrome.runtime.onMessage.addListener(listener);\n            try {\n                chrome.runtime.sendMessage(Object.assign(Object.assign({}, message), { id }));\n            }\n            catch (error) {\n                chrome.runtime.onMessage.removeListener(listener);\n                reject(error);\n            }\n            // Timeout sau 30 giây\n            setTimeout(() => {\n                chrome.runtime.onMessage.removeListener(listener);\n                reject(new Error('Request timeout'));\n            }, 30000);\n        });\n    });\n}\n// Lắng nghe message từ trang web\nwindow.addEventListener('message', (event) => {\n    if (event.source !== window)\n        return;\n    switch (event.data.type) {\n        case 'SOL_CONNECT_REQUEST':\n            console.log('Received SOL_CONNECT_REQUEST from provider');\n            // Sử dụng Promise.race để thêm timeout\n            Promise.race([\n                new Promise((_, reject) => setTimeout(() => reject(new Error('Request timeout')), 30000)),\n                new Promise((resolve, reject) => {\n                    try {\n                        chrome.runtime.sendMessage({\n                            type: 'CONNECT_REQUEST',\n                            origin: window.location.origin\n                        }, (response) => {\n                            if (chrome.runtime.lastError) {\n                                reject(chrome.runtime.lastError);\n                                return;\n                            }\n                            resolve(response || {\n                                type: 'SOL_CONNECT_RESPONSE',\n                                approved: false,\n                                error: 'Invalid response'\n                            });\n                        });\n                    }\n                    catch (error) {\n                        reject(error);\n                    }\n                })\n            ]).then((response) => {\n                console.log('Got response from background:', response);\n                window.postMessage({\n                    type: 'SOL_CONNECT_RESPONSE',\n                    approved: (response === null || response === void 0 ? void 0 : response.approved) || false,\n                    publicKey: response === null || response === void 0 ? void 0 : response.publicKey,\n                    error: response === null || response === void 0 ? void 0 : response.error\n                }, '*');\n            }).catch(error => {\n                console.error('Connection error:', error);\n                window.postMessage({\n                    type: 'SOL_CONNECT_RESPONSE',\n                    approved: false,\n                    error: error.message || 'Connection failed'\n                }, '*');\n            });\n            break;\n        case 'SOL_SIGN_TRANSACTION_REQUEST':\n            // Sử dụng Promise cho sign transaction\n            sendMessageToBackground({\n                type: 'SIGN_TRANSACTION',\n                transaction: event.data.transaction,\n                origin: window.location.origin\n            }).then(response => {\n                window.postMessage({\n                    type: 'SOL_SIGN_TRANSACTION_RESPONSE',\n                    approved: response.approved,\n                    signedTx: response.signedTx\n                }, '*');\n            }).catch(error => {\n                console.error('Sign transaction error:', error);\n                window.postMessage({\n                    type: 'SOL_SIGN_TRANSACTION_RESPONSE',\n                    approved: false,\n                    error: error instanceof Error ? error.message : 'Unknown error'\n                }, '*');\n            });\n            break;\n        case 'SOL_SIGN_MESSAGE_REQUEST':\n            // Sử dụng Promise cho sign message\n            sendMessageToBackground({\n                type: 'SIGN_MESSAGE',\n                message: event.data.message,\n                origin: window.location.origin\n            }).then(response => {\n                window.postMessage({\n                    type: 'SOL_SIGN_MESSAGE_RESPONSE',\n                    approved: response.approved,\n                    signature: response.signature\n                }, '*');\n            }).catch(error => {\n                console.error('Sign message error:', error);\n                window.postMessage({\n                    type: 'SOL_SIGN_MESSAGE_RESPONSE',\n                    approved: false,\n                    error: error instanceof Error ? error.message : 'Unknown error'\n                }, '*');\n            });\n            break;\n    }\n});\n// Lắng nghe message từ background\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    try {\n        console.log('Content script received message:', message);\n        if (message.type === 'CONNECTION_RESPONSE') {\n            console.log('Forwarding CONNECTION_RESPONSE to provider:', message);\n            if (!message.publicKey) {\n                console.error('No publicKey in CONNECTION_RESPONSE');\n            }\n            window.postMessage({\n                type: 'SOL_CONNECT_RESPONSE',\n                approved: message.approved,\n                publicKey: message.publicKey,\n                error: message.error || (!message.publicKey && message.approved ? 'No public key received' : undefined)\n            }, '*');\n        }\n        sendResponse(); // Gửi response ngay lập tức\n    }\n    catch (error) {\n        console.error('Error handling message:', error);\n    }\n});\n// Inject provider script\nconst script = document.createElement('script');\nscript.src = chrome.runtime.getURL('provider.js');\n(document.head || document.documentElement).appendChild(script);\n// Thông báo provider đã sẵn sàng\nscript.onload = () => {\n    script.remove();\n    window.dispatchEvent(new Event('solana#initialized'));\n};\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[88](0, __webpack_exports__);\n",""],"names":[],"sourceRoot":""}